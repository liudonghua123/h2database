name: h2_CI_CD
on:
  push:
    tags:
      - "*"
    branches:
      - 'main'
      - 'master'

jobs:
  build-jar:
    name: 'Build JAR'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Setup Java 8'
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: 'Build JAR'
        run: |
          cd h2
          echo $JAVA_OPTS
          export JAVA_OPTS=-Xmx512m
          ./build.sh jar
          # copy jar file to h2.jar
          cp ../h2/bin/h2*.jar ../h2/bin/h2.jar
      - name: 'Get the jar filename'
        id: jar_filename
        run: |
          echo ::set-output name=JAR_FILENAME::$(basename $(ls h2/bin/h2*.jar))
      - uses: actions/upload-artifact@v2
        with:
          name: h2.jar
          path: h2/bin/h2.jar
      - name: 'Publish JAR to release'
        if: contains(github.ref, 'tags')
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: h2/bin/${{ steps.jar_filename.outputs.JAR_FILENAME }}
          tags: true
          draft: false

  build-native-image:
    name: 'Build native Image'
    needs: [build-jar]
    env:
      APP_NAME: h2
    if: contains(github.ref, 'tags')
    strategy:
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        include:
          - os: 'ubuntu-latest'
            label: 'linux'
          - os: 'macos-latest'
            label: 'macos'
          - os: 'windows-latest'
            label: 'windows'
    runs-on: ${{matrix.os}}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: Branch name
        id: branch_name
        run: |
          echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}
          echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
        shell: bash
      # - name: 'Setup Java 8'
      #   uses: actions/setup-java@v1
      #   with:
      #     java-version: 8
      # - name: 'Build JAR'
      #   run: |
      #     cd h2
      #     echo $JAVA_OPTS
      #     export JAVA_OPTS=-Xmx512m
      #     ./build.sh jar
      #     ls -l
      - uses: actions/download-artifact@v2
        with:
          name: h2.jar
      - name: Display structure of downloaded files
        run: ls -l
        shell: bash
      # - name: 'Set up Visual C Build Tools Workload for Visual Studio 2019 Build Tools on Windows'
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     choco install visualstudio2019-workload-vctools
      # https://github.com/graalvm/graalvm-ce-builds/releases/vm-20.3.3
      # https://github.com/graalvm/graalvm-ce-builds/releases/vm-20.3.4
      # 20.3.3 is the last graalvm-ce java 8 on Windows
      # 20.3.4 is the first graalvm-ce java 8 on macos
      - name: 'Setup GraalVM Environment'
        uses: ayltai/setup-graalvm@v1
        with:
          java-version: 11
          graalvm-version: 21.3.0
          native-image: true
      - name: check java version
        run: java -version
      - name: 'Build Native Image on non-windows'
        if: matrix.os != 'windows-latest'
        run: |
          pwd && ls -l
          mkdir build
          cd build
          native-image --no-fallback -H:Name=${APP_NAME} -jar ../h2.jar --verbose --allow-incomplete-classpath -H:ReflectionConfigurationFiles=../h2/reflectconfig -H:IncludeResources=".*/data.zip$" -H:Log=registerResource:
          pwd && ls -l
      - name: 'Build Native Image on windows'
        if: matrix.os == 'windows-latest'
        run: |
          # the path of visualstudio2019-workload-vctools is different then vs_installer
          # call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat"
          # call "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvars64.bat"
          call   "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          dir
          mkdir build
          cd build
          native-image --no-fallback -H:Name=${APP_NAME} -jar ../h2.jar --verbose --allow-incomplete-classpath -H:ReflectionConfigurationFiles=../h2/reflectconfig -H:IncludeResources=".*/data.zip$" -H:Log=registerResource:
          dir
        shell: cmd
      - name: Prepare release files
        run: |
          7z a -tzip ${APP_NAME}-${{matrix.label}}-${{ steps.branch_name.outputs.SOURCE_NAME }}.zip -r ./build/*
        shell: bash
      - name: 'Publish binary to release'
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: ${APP_NAME}-${{matrix.label}}-${{ steps.branch_name.outputs.SOURCE_NAME }}.zip
          tags: true
          draft: false